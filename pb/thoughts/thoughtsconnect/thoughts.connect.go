// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: thoughts/thoughts.proto

package thoughtsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	thoughts "github.com/machshev/masa/pb/thoughts"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ThoughtServiceName is the fully-qualified name of the ThoughtService service.
	ThoughtServiceName = "machshev.masa.pb.thoughts.ThoughtService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ThoughtServiceAddProcedure is the fully-qualified name of the ThoughtService's Add RPC.
	ThoughtServiceAddProcedure = "/machshev.masa.pb.thoughts.ThoughtService/Add"
	// ThoughtServiceListProcedure is the fully-qualified name of the ThoughtService's List RPC.
	ThoughtServiceListProcedure = "/machshev.masa.pb.thoughts.ThoughtService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	thoughtServiceServiceDescriptor    = thoughts.File_thoughts_thoughts_proto.Services().ByName("ThoughtService")
	thoughtServiceAddMethodDescriptor  = thoughtServiceServiceDescriptor.Methods().ByName("Add")
	thoughtServiceListMethodDescriptor = thoughtServiceServiceDescriptor.Methods().ByName("List")
)

// ThoughtServiceClient is a client for the machshev.masa.pb.thoughts.ThoughtService service.
type ThoughtServiceClient interface {
	Add(context.Context, *connect.Request[thoughts.AddRequest]) (*connect.Response[thoughts.AddResponse], error)
	List(context.Context, *connect.Request[thoughts.ListRequest]) (*connect.Response[thoughts.ListResponse], error)
}

// NewThoughtServiceClient constructs a client for the machshev.masa.pb.thoughts.ThoughtService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewThoughtServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ThoughtServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &thoughtServiceClient{
		add: connect.NewClient[thoughts.AddRequest, thoughts.AddResponse](
			httpClient,
			baseURL+ThoughtServiceAddProcedure,
			connect.WithSchema(thoughtServiceAddMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[thoughts.ListRequest, thoughts.ListResponse](
			httpClient,
			baseURL+ThoughtServiceListProcedure,
			connect.WithSchema(thoughtServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// thoughtServiceClient implements ThoughtServiceClient.
type thoughtServiceClient struct {
	add  *connect.Client[thoughts.AddRequest, thoughts.AddResponse]
	list *connect.Client[thoughts.ListRequest, thoughts.ListResponse]
}

// Add calls machshev.masa.pb.thoughts.ThoughtService.Add.
func (c *thoughtServiceClient) Add(ctx context.Context, req *connect.Request[thoughts.AddRequest]) (*connect.Response[thoughts.AddResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// List calls machshev.masa.pb.thoughts.ThoughtService.List.
func (c *thoughtServiceClient) List(ctx context.Context, req *connect.Request[thoughts.ListRequest]) (*connect.Response[thoughts.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// ThoughtServiceHandler is an implementation of the machshev.masa.pb.thoughts.ThoughtService
// service.
type ThoughtServiceHandler interface {
	Add(context.Context, *connect.Request[thoughts.AddRequest]) (*connect.Response[thoughts.AddResponse], error)
	List(context.Context, *connect.Request[thoughts.ListRequest]) (*connect.Response[thoughts.ListResponse], error)
}

// NewThoughtServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewThoughtServiceHandler(svc ThoughtServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	thoughtServiceAddHandler := connect.NewUnaryHandler(
		ThoughtServiceAddProcedure,
		svc.Add,
		connect.WithSchema(thoughtServiceAddMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	thoughtServiceListHandler := connect.NewUnaryHandler(
		ThoughtServiceListProcedure,
		svc.List,
		connect.WithSchema(thoughtServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/machshev.masa.pb.thoughts.ThoughtService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ThoughtServiceAddProcedure:
			thoughtServiceAddHandler.ServeHTTP(w, r)
		case ThoughtServiceListProcedure:
			thoughtServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedThoughtServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedThoughtServiceHandler struct{}

func (UnimplementedThoughtServiceHandler) Add(context.Context, *connect.Request[thoughts.AddRequest]) (*connect.Response[thoughts.AddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machshev.masa.pb.thoughts.ThoughtService.Add is not implemented"))
}

func (UnimplementedThoughtServiceHandler) List(context.Context, *connect.Request[thoughts.ListRequest]) (*connect.Response[thoughts.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("machshev.masa.pb.thoughts.ThoughtService.List is not implemented"))
}
